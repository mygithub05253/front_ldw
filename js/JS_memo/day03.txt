프로그래밍 패러다임
- 개발자에게 프로그래머로서 관심을 갖게 하고 결정하는 역할(개발 방법)

패러다임 종류
1) 명령형
	- 절차 지향형 : 순서를 중요시하며 컴퓨터의 처리 구조와 비슷하게 개발, 속도가 빠름(C, Cobol, ...)
	- 객체 지향형 : 객체(집단)의 상호 작용을 중요시, 유지 보수가 용이(JAVA, C++, ...), 이식성이 좋음

2) 선언형
	- 무엇을 할 것인지가 중요한 개발
	- 순수 함수를 조합하여 프로그래밍을 하는 방식
	- 함수 지향형 프로그래밍 언어(JavaScript)

	순수 함수 : 입력 값에만 의존하고, 부수 효과 연산에 영향이 미치지 않음

	불변셩 : 함수 밖에서 데이터의 변형을 일으켜서는 안된다.
		   객체가 생성된 이후 그 상태를 변경할 수 없는 것을 의미
		   객체의 프로퍼티를 변경할 수 없다는 것을 의미

	모듈화 : 함수를 분리하여 재사용 및 관리가 용이하도록 구성해야 함

함수(function)란?
- 코드 블록으로 감싸져 있는 문으로 이루어진 하나의 실행 단위

함수의 이름을 짓는 방법
예시)
function showMessage() {} // 메시지를 보여주는 함수
function getAge() {} // 나이를 나타내는 값을 얻는 함수
calcSum() {} // 합계를 계산하고 그 값을 반환하는 함수
createForm() {} // form을 생성하고 만들어진 form을 반환하는 함수
checkPermission() {} // 승인 여부를 확인하여 true, false를 반환하는 함수

함수의 규칙
1) 함수는 동작 하나만 담당해야 함
2) 함수는 함수 이름에 언급되어 있는 동작을 정확히 수행해야 하고 그 외의 동작을 수행하면 안됨
3) 카멜 표기법을 사용하여 짓기
4) 함수의 이름은 동사를 사용하여 표기

함수의 선언
function 함수명(파라미터1, 파라미터2, ...) {
	함수 내부에서 실행할 문장;
}

함수의 실행
1) 함수명()
2) 함수형(인자1, 인자2, ...)

함수의 파라미터 "()" 
- 실행부에서 전달받은 값, param, 매개변수, 파라미터, 인수, ...

매개변수의 활용(parameter, param, 인자, argument)

리턴(return)
	- return 명령문은 함수 실행을 종료하고, 주어진 값을 함수 호출 지점으로 반환
	- Early Return? 의도에 어긋났을 때 코드를 방어하기 위해서 사용하여 아무런 값을 주지 않는 것

기명 함수, 익명 함수
1) 기명 함수 : 이름을 지어주는 함수
	function hello() {}

2) 익명 함수 : 이름이 없는 함수
	function () {}
	- 다른 함수의 매개변수로 전달되어 바로 실행되는 함수(콜백 함수, 클로저, 즉시 실행의 목적 함수)
	- 재사용 기능이 없는 경우에 선언 후 바로 사용됨

재귀함수 : 함수 안에서 같은 함수를 실행하도록 설계한 로직(반복)

즉시 실행 함수 : (function() {
})()

화살표 함수(ES6)
	- 객체 this 바인딩에 차이가 있어서 객체 시간에 설명 예정

1) 기명 화살표 함수
- (파라미터1, 파라미터2) => { 선언문 };
const name = () => {};

2) 익명 화살표 함수
() => {};






























