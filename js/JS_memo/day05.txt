프로토 타입
- 이미 값을 알고 있는 경우 사용
- 프로토 타입은 함수로 선언하여 사용
- 단 반드시 대문자로 시작하기
- 같은 형태(변수, 메서드)를 상속시켜주기 위해서 선언

배열 
- 각 타입이 프로퍼티로 가지고 있는 내장 함수를 사용하는 방법들을 정의

배열의 생성
1) const array = [];

2) const array = new Array();

3) const array3 = Array.of(1, 2, 3);
=> .of("초기값1", "초기값2", ...)

4) .fill("초기값")으로 방을 모두 채우는 방식

배열의 길이
- 배열명.length

배열의 메서드
1) .push()
- 기존 배열에 값을 맨 뒤에 추가

2) .concat()
- 2개의 배열을 [새로운 배열]로 리턴
- 특정 배열에 인자로 들어온 배열을 합칠 때 사용

3) .pop()
- 마지막 요소를 제거하며, 그 값을 반환

4) .unshift()
- 맨 앞에 있는 요소를 추가하는 메서드

5) .shift()
- 맨 앞에 있는 요소를 제거하며, 그 값을 반환

6) .join()
- 전달된 매개변수를 기준으로 붙여서 새로운 문자열로 리턴

7) .slice()
- start부터 end 직전 인덱스 번호까지 요소를 복사해서 [새로운 배열]로 반환
- 얕은 복사 진행
- 단 매개변수를 1개만 전달하면 끝까지 가져옴
- 즉, 마지막 index는 -1로 표기

8) .splice(start, deleteCount, addItem);

9) .sort()
- 무작위로 들어간 데이터 값을 정렬하는 메서드

10) .reverse()

string 메서드
1. split("")
- 전달된 매개변수를 기준으로 자라서 배열로 리턴해주는 메서드
- 아무것도 전달하지 않으면 모두 자름

2. replace("바꾸고 싶은 값", "바꿀 값")
- 전달된 매개변수 중 제일 먼저 만나는 갑을 찾아서 치환
- 모두 바꾸려면 replaceAll 사용

3. .includes()

배열의 고차함수

1) .forEach(callback(data, index, datas) => {})
- 반복문
- data : 현재 처리해야 할 값
- index : 해당 인덱스
- datas : 배열
- 즉, i를 활용하여 iterable(순서가 있는)한 key 값에 접근 가능

2) .map(callback(data, index, datas) => {}) 
- 반복문
- [새로운 배열]을 리턴

3) .filter()
- 배열의 일부에 대한 얕은 복사본을 생성하고, 주어진 배열에서 제공된 함수에 의해 구현된 테스트를 통과한 요소로만 필터링 진행
- 조건이 true인 값을 새로운 복사본으로 생성

4) .indexOf()
- 값을 해당하는 Array에서 찾은 뒤 인덱스 번호를 리턴, 못 찾을 경우 -1을 리턴

5) .find(callback)
- 조건식에 만족하는 첫 번째 값을 반환
- 마지막 값을 반환하려면 findLast() 사용

6) .from()
- 유사 배열 객체를 배열로 바꿔주는 함수

7) reduce((콜백 함수의 반환 값, 현재 반복되고 있는 값, 초기 값) => {})






