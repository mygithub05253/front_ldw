method : 요청방식. (get이 디폴트)

url : 서버 주소

baseURL : url을 상대 경로로 쓸 때 url 맨 앞에 붙는 주소
   - headers : 요청 헤더
   - data : 요청 방식이 'PUT', 'POST', 'PATCH' 해당하는 경우 body에 보내는 데이터
   - params : URL 파라미터 ( ?key=value 로 요청하는 url get방식을 객체로 표현한 것)
   - timeout : 요청 timeout이 발동 되기 전 milliseconds의 시간을 요청. timeout 보다 요청이 길어질 경우 요청은 취소됨
   - responseType : 서버가 응답해주는 데이터의 타입 지정 (arraybuffer, documetn, json, text, stream, blob)
   - responseEncoding : 디코딩 응답에 사용하기 위한 인코딩 (utf-8)
   - transformRequest : 서버에 전달되기 전에 요청 데이터 변경 가능

1. 요청방식
- 'PUT', 'POST', 'PATCH', 'DELETE' 에 해당하는 경우에 이용 가능
- 배열의 마지막 함수는 string 또는 Buffer, 또는 ArrayBuffer를 반환

header 객체를 수정 가능
   - transformResponse : 응답 데이터가 만들어지기 전에 변환 가능
   - withCredentials : cross-site access-control 요청을 허용 유무. 이를 true로 하면 cross-origin으로 쿠키값을 전달 가능
   - auth : HTTP의 기본 인증에 사용. auth를 통해서 HTTP의 기본 인증이 구성이 가능
   - maxContentLength: http 응답 내용의 max 사이즈를 지정하도록 하는 옵션
   - validateStatus : HTTP응답 상태 코드에 대해 promise의 반환 값이 resolve 또는 reject 할지 지정하도록 하는 옵션
   - maxRedirects : node.js에서 사용되는 리다이렉트 최대치를 지정
   - httpAgent /  httpsAgent : node.js에서 http나 https를 요청을 할때 사용자 정의 agent를 정의하는 옵션
   - proxy : proxy서버의 hostname과 port를 정의하는 옵션
   - cancelToken : 요청을 취소하는데 사용되어 지는 취소 토큰을 명시

==============================================================================

에러 핸들링(예외 처리)
1) 컴파일 오류
- 실행할 수 없는 상태를 의미, 즉 빨간 줄이 코드에 들어가 있는 경우

2) 빌드 오류
- 컴파일이 완료되어 만들어지면서 생기는 오류를 의미

3) 런타임 오류
- 실행 중일 때 한 번이라도 정상적으로 실행되었고, 사용자에 의해서 생긴 오류를 의미

try {
	예외가 발생할 수 있는 문장
} catch(error) {
	예외가 발생 시 실행할 문장
} finally {
	예외 발생 여부에 상관없이 무조건 실행할 문장
	catch로 잡지 못하는 오류들을 실행해야 할 때 사용
	** 외부 장치와 연결했을 경우 다시 닫아줄 때 주로 사용
}

error
1) name
- 에러 이름, 정의되지 않은 변수 때문에 발생한 에러라면 "ReferenceError"

2) message
- 에러 상세 내용을 담고 있는 문자 메시지

3) stack
- 비표준 프로퍼티(가장 널리 사용)