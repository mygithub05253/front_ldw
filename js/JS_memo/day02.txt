1. 최우선 연산자
	10 * 2 + 2 = 22
	10 * ( 2 + 2 ) = 40

2. 단항 연산자(항이 1개인 연산자)
	++ : 값이 1씩 증가
	-- : 값이 1씩 감소
	단 +는 양수(영향이 없음), -는 음수가 됨

	전위형 : ++a
	후위형 : a++
	! : NOT 연산자 => 할당된 값을 부정하는 연산자

3. 이항 연산자(항이 2개인 연산자)
	1) 산술 연산자
	a. +, - *, /, %
	b. %는 나머지 연산자
	c. +의 특정 문자와 문자는 연결, 문자와 숫자도 연결, 숫자와 숫자는 연산

4. 할당 연산자
	1) += : 값의 누적
	2) -= : 값이 빠지면서 누적
	3) *= : 값이 곱해지면서 누적

5. 쉬프트 연산자
	1) a << b
	2) 피연산자를 명시한 비트 수만큼 이동시킴
	3) [피연산자] << 비트수
	4) ~ : 쉬프트 부정 연산자

6. 관계 연산자 (*조건식은 단 1개만 사용 가능)
	1) == : 동등 비교 => 값만 같은 지 비교
	2) === : 일치 비교 => 값과 자료형이 같은 지 비교
	3) != : 부등 비교 => 값만 다른 지 비교
	4) !== : 불일치 비교 => 값과 타입(자료형)이 다른 지 비교

7. 논리 연산자
	1) || 논리합 (or) : 둘 중 하나라도 true이면 true
		- 조건식 || 값이 사용되었을 경우, 값이 false일 때가 ||의 초기값
	2) && 논리곱(and) : 둘 다 true여야만 true
		- 자바스크립트에서는 선행 조건식이 false일 때 뒤에 값을 실행하지 않음
		- 선행 조건식이 true이면 뒤에 값을 반환
		- 성능을 위해서 앞에 있는 값이 false이면 뒷 문장을 실행하지 않음
		- false가 아니어도 false로 인식되는 값 : null, undefined, 0, "", 공백문자, NaN, false
	3) ! 부정(not) : !true => false
	4) ?? 병합 연산자 : null, undefined인 경우에만 오른쪽 값을 반환
		- ?. : 옵셔널 체이닝(Optional Chaining)
		- 객체에서 undefined나 null에 접근하는 경우 에러가 발생하는데, 안전하게 객체에 프로퍼티에 접근하기 위해서 사용
		- *하지만 남발할 경우 에러도 핸들링 해야 하기 때문에 오히려 에러가 나지 않는 것이 문제 해결에 어려움을 더 줄 수 있음

8. 삼항 연산자
	JavaScript에서 3개의 피연산자를 받는 유일한 연산자
	조건식이 하나일 때 사용하는 연산자

	1) 조건식 ? true : false
	10 ? "a" : "b" => a 출력
	"" ? "c" : "d" => d 출력

9. 대입 연산자
	a = b;

10. 연산자의 우선 순위
1) 최우선 연산자
2) 단항 연산자
3) 산술 연산자
4) 쉬프트 연산자
5) 관계 연산자
6) 논리 연산자
7) 삼항 연산자
8) 대입 연산자

============================================================
형변환
	- 원하는 자료형으로 변환, 즉 타입을 바꾸는 것
	1) 정수형 숫자로 변환 : parseInt("문자열"), Number("문자열");
	2) 실수형 숫자로 변환 : parseFloat("문자열");
	3) 논리형으로 변환 : Boolean()
	4) 정수 또는 실수를 String 타입으로 변환 : 정수.toString()
	5) 실수의 소수점 자릿수를 제어해주는 함수 : 실수.toFixed(소수점 자리수)

제어문이란?
	프로그램의 동작 흐름에 조건/반복을 통해 제어할 수 있는 실행문

1. 조건문
	조건문이란 프로그램 내에서 주어진 표현식의 결과에 따라 별도의 명령을 수행하도록 제어

	1) if문

	if(조건식) {
		실행할 문장;
	}
	
	2) if~if문 : 위의 조건식1의 결과와 상관없이 무조건 조건식2 검사
	if(조건식1) {
		실행할 문장;
	}
	if(조건식2) {
		실행할 문장;
	}

	3) if~else문
	if(조건식) {
		true일 때 실행할 문장;
	} else {
		false일 때 실행할 문장;
	}

	4) if~else if~else문
	if(조건식1) {
		조건식1을 만족할 때 실행할 문장;
	}
	else if(조건식2) {
		조건식1을 만족하지 않으며, 
		조건식2를 만족할 때 실행할 문장;
	} else {
		조건식1, 조건식2를 만족하지 않으면 실행할 문장;
	}

	5) switch문
	
	switch(값) {
		case 1:
			실행할 문장;
			break;
		case 2:
			실행할 문장;
			break;
		case 3:
			실행할 문장;
			break;
		default:
			실행할 문장;
			break;
	}

2. 반복문
	1) for문
		- forEach, for..in, for..of

	for(초기식; 조건식; 증감식) {
		조건식이 참일 경우 반복해서 실행하는 문장;
	}

3. 기타 제어문
	break : 즉시 해당 중괄호 영역을 탈출
		- if문 안에서 사용할 시 if문을 탈출하지 않고 if문을 감싸고 있는 중괄호 영역을 탈출
	continue : 즉시 다음 반복을 실행
		- 아래에 작성된 코드를 실행하고 싶지 않을 때 사용