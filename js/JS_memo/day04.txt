스코프(scope)
지역 변수와 전역 변수
	- 변수의 사용 범위(scope)에 따라서 전역 변수(global)와 지역 변수(local)로 나뉨
	- 전역 변수 : 영역 밖에서 선언된 변수
		- Node.js에서는 전역 변수를 모두 global 객체에서 관리
		- 브라우저에서는 window 객체에서 전역 변수를 관리
		- 따라서 어디에서 사용될 지 모를 때는 globalThis 객체에서 사용
	- 지역 변수 : 영역 안에서 선언된 변수

함수 레벨의 스코프
- 함수 내에서 선언된 변수는 지역 변수로 함수 내에서만 유효하고 외부에서는 참조할 수 없고 함수 외부에 선언된 모든 변수는 지역 변수로 취급

콜백 함수(callback)
- 모듈화를 시키기 위해서, 원하는 곳에서 실행하기 위해서 사용
- 모듈화 : 쉽게 말하자면 큰 애플리케이션을 작은 파일로 분리해서 관리할 때 이 파일을 각각 의미

콜백 함수의 원칙
1) 익명 함수를 사용
2) callback이라는 매개변수로 사용

객체(object)란?
- 자룔를 저장하고 처리하는 데이터의 기본 단위
- 추상화하여 상태와 행위를 가지는 것이 객체

자바스크립트는 객체 기반의 스트립트 언어이며, 자바스크립트를 이루고 있는 모든 것이라고 해도 무방

자바스크립트의 객체는 키와 값으로 구성된 속성들의 집합
- 키 : 집합에서 특정한 값을 찾기 위해 다른 값들과 비교되는 값
- 프로퍼티 : 키로 이름을 구별하고 해당 키 값으로 구성되어 있음(키와 값이 한 쌍)

접근 방법
1) 마침표 표기법
- obj.key

2) 대괄호 표기법
- obj["keyName"]

객체의 프로퍼티는 있으면 수정, 없으면 추가됨

객체의 참조를 확인할 수 있는 사이트 : pythontutor.com

자바스크립트는 싱글 쓰레드의 싱글 컨커런트 언어
=> 이는 동시에 하나의 작업이나 하나의 코드 조각만 실행할 수 있다는 것을 의미
=> 하나의 콜스택을 가지며, 스택은 힙, 큐와 함께 V*엔진 내부에서 실행하는 자바스크립트의 동시성 모델을 구성

1. 콜스택(call stack)
- 힙에 저장된 객체의 주소값이 저장됨

2. 힙(memory heap)
- 대부분 구조화되지 않은 메모리 영역에 할당되고, 변수와 객체에 모든 메모리 할당은 여기서 발생

1) 원시 데이터 값
	값 : 원시 타입 값 자체는 call stack에 저장
	변수 : 변수는 값이 저장된 call stack에 주소를 참조

2) 참조 데이터 값
	값 : 참조 타입(객체, 배열, 함수)는 memory heap에 할당
	참조 값 : 저장된 memory heap 주소를 call stack에 저장
	변수 : 변수는 memory heap 주소가 저장된 call stack 메모리의 주소를 참조

const와 let의 차이는 참조하고 있는 주소값의 변경 유무의 차이

let myObject = {}; => Bad
const myObject ={}; => Good




































