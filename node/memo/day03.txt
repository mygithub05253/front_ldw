mongodb+srv://app:1234@app.6nxt4.mongodb.net/

mongoDB란?
- MongoDB는 고성능, 고가용성 및 쉬운 확장성을 제공하는 NoSQL, Document 지향 데이터베이스
- 데이터를 배열 및 중첩 Document와 같은 복잡한 데이터 유형을 효율적으로 저장할 수 있는 유연한 JSON과 유사한 형식인 BSON(Binary JSON)으로 저장

NoSQL이란?
- NoSQL은 Not only SQL의 약자
- 문자 그래프 데이터베이스, 키-값 저장소와 같은 비관계형 데이터 구조를 사용하여 데이터를 저장하고 검색하는 데이터베이스의 한 유형

NoSQL의 장점
- JSON 형태로만 저장하기 때문에 처리 속도가 빨라서 초고용량 데이터 처리에 최적화
- 스키마가 없기 때문에 데이터를 원하는 방식으로 수정할 수 있고 새로운 필드를 추가할 수 있는 유연성 존재
- 기존 관계형 데이터베이스에 비해 뛰어난 성능 제공

BSON이란?
- BSON은 다양한 데이터 유형을 지원하는 포멧
- 숫자, 문자열, 불리언, 배열, 객체 등 다양한 유형의 데이터를 BSON으로 표현 가능
- JSON에 비해 저장 공간을 더 효율적으로 사용 가능
- MongoDB에서 대량의 데이터를 처리하고 저장 공간을 절약하는데 도움을 주며, 네트워크 이진 형식으로 직렬화되므로 전송 속도가 향상

---------------------------------------------------------------------------------------------------------------------------------------------------
MongoDB 문법

- $eq : 단일 일치 값
   > find(<value> : {$eq: <searchValue>})
- $ne : 일치하지 않는 모든 값
   > find(<value> : {$ne: <notSameValue>})
- $in : 여러값 중 일치하는 값 "||"
   > find(<value> : {$in: [<value>, <value>]})
- $nin : 여러값 중 일치하지 않는 값 "||"
   > find(<value> : {$nin: [<value>, <value>]})
- $not : false를 true, true를 false로
   > find(<value> : { $not: {$nin: [<value>, <value>]})

- $gt : 지정된 값보다 큰 값 조회.
   > find(<value> : {$et: <searchValue>})

- $gte : 지정된 값보다 크거나 같은 값 조회
   > find(<value> : {$ete: <searchValue>})

- $lt : 지정된 값보다 작은 값 조회
   > find(<value> : {$lt: <searchValue>})

- $lte : 지정된 값보다 작거나 같은 값 조회
   > find(<value> : {$lte: <searchValue>})

- $or : 하나라도 true면 true // 여러값은 배열의 형태로 전달
   > find(<value> : {$or: {[<value>, <value>]}})

- $and : 모두 true면 true // 여러값은 배열의 형태로 전달
   > find(<value> : {$or: {[<value>, <value>]}})

- $nor : 모두 false면 ture
   > find(<value> : {$nor: {[<value>, <value>]}})


- Embedded Data: value에 여러 정보(객체)가 있을 때
   > .find({ "object.properties": <value> }).toArray();

- listed Data: value에 여러 정보가 배열로 있을 때
   > .find({ "key" : <value> }).toArray();

- Embedded Data list: value에 여러 정보(객체)가 list형태로 있을 때
   > .find({ address: { $elemMatch: { main: "서울" } } })

- projection: 선택 필드(원하는 정보만 가져오기)
   >  .find({}, { projection: { name: 1 } })

※ 데이터 삭제
- 단일 삭제
   > deleteOne({<value>: $eq : {"<value>"}})

- 전체삭제
   > deleteMany()

