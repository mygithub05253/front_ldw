정규식 표현법
- 정규 표현식에서 사용되는 기호들을 Meta 문자라고 표현
- 표현식에서 내부적으로 특정 의미를 가지는 문자

정규식 표현법 정리
1. ^x : 문자열의 시작을 표현 => x 문자로 시작됨을 의미
2. ^$ : 문자열의 종료를 표현 => x 문자로 종료됨을 의미
3. .x : 임의의 한 문자의 자리수를 표현하며 문자열이 x로 끝난다는 것을 의미
4. x+ : 반복을 표현하며 x 문자가 한 번 이상 반복됨을 의미
5. x? : 존재 여부를 표현 => x 문자가 존재할 수도, 존재하지 않을 수도 있음을 의미
6. x* : 반복 여부를 표현 => x 문자가 0번 또는 그 이상 반복됨을 의미
7. x|y : or를 표현 => x 또는 y 문자가 존재함을 의미
8. (x) : 그룹을 표현 => x를 그룹으로 처리함을 의미
9. (x)(y) : 그룹들의 집합을 표현 => 앞에서부터 순서대로 번호를 부여하여 관리 => x, y는 각 그룹의 데이터로 관리
10. (x)(?:y) : 그룹들의 집합에 대한 예외를 표현 => 그룹 집합으로 관리되지 않음을 의미
11. x{n} : 반복을 표현 => x 문자가 n번 반복됨을 의미
12. x{n,} : 반복을 표현 => x 문자가 n번 이상 반복됨을 의미
13. x{n,m} : 반복을 표현 => x 문자가 최소 n번 이상 최대 m번 이하로 반복됨을 의미

'[]'
- 내부에 지정된 문자열의 범위 중에서 한 문자만을 선택하다는 특수한 의미를 가짐
- 내부에서 Meta 문자를 사용하면 다른 의미를 가지고 동작할 수 있으므로 잘 확인하고 사용해야 함

특별한 용도로 사용되는 것들
1. [xy] : 문자 선택을 표현하며 x와 y 중에 하나를 의미
2. [^xy] : not을 표현 => x 및 y를 제외한 문자를 의미
3. [x-z] : range를 표현하며 x ~ z 사이의 문자를 의미
4. /^ : escape를 표현 => ^를 문자로 사용함을 의미
5. /b : word boundary를 표현하며 문자와 공백 사이의 문자를 의미
6. /B : non word boundary를 표현하며 문자와 공백 사이가 아닌 문자를 의미
7. /d : digit를 표현 => 숫자를 의미
8. /D : non digit를 표현 => 숫자가 아닌 것을 의미
8. /s : space를 표현 => 공백 문자를 의미
9. /S : non space를 표현 => 공백 문자가 아닌 것을 의미
10. /t : tab을 표현 => 탭 문자를 의미
11. /v : vertical tab을 표현 => 수직 탭(?) 문자를 의미
12. /w : word를 표현 => 알파벳 + 숫자 + _ 중의 한 문자임을 의미
13. /W : non word를 표현하며 알파벳 + 숫자 + _가 아닌 문자를 의미

정규식 표현법 깔끔 정리
1. 수량자 (**Quantifiers)**
- ? : 없거나 있거나 (zero or one)
- * : 있거나 많거나 (zero or more)
- +: 하나 또는 많이 (one or more)
- {n} : n개가 있는
- {min} : 최소
- {min, max} : 최소 그리고 최대

2. 범위(Group and Range)
- (): 그룹
- []: 문자셋, 괄호안에 어떤 문자
- [^]: 부정 문자셋
- (?:): 찾지만 기억하지는 않음
- (?=): 앞쪽과 일치
- (?<=): 뒤쪽과 일치

--------------------------------------------------------------------------------------------------------------------------------------

리액트 훅 폼
- register : input 요소를 React hook form과 연결해 검증 규칙을 적용할 수 있게 하는 메소드
- handleSubmit : form을 submit했을 때 실행할 함수.
- formState : form state에 관한 정보를 담고 있는 객체
- errors : input 값들의 에러 정보를 가지고 있는 객체
- getValues : input 값을 가져올 수 있는 함수

`useForm({ mode: "onChange" })` mode 
- mode를 설정함으로써 해당 모드의 register 안 검증 로직이 동작하는 규칙을 정하는 행위 가능

종류
- onChange : input 값이 바뀔 때마다 검증 로직이 동작합니다.
- onBlur : 포커스 상태를 잃어 버릴떄 동작합니다.
- onSubmit : 제출 함수가 실행될 때 동작합니다.
- onTouched : 첫 번째 blur 이벤트에서 동작합니다. 그 후에는 모든 change 이벤트에서 동작합니다.
- all : blur 및 change 이벤트에서 동작합니다.

-------------------------------------------------------

리액트 서버 패키지 설치
1. yarn global add json-server
=> 연결시 npx json-server json파일이름 --watch --port 포트번호