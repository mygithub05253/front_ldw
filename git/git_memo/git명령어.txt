1) git init

2) 기존 등록된 git-hub 계정 삭제
git config --global --unset-all user.email
git config --global --unset-all user.name

3) git-hub 계정 등록
git config --global user.email "git-hub 이메일"
git config --global user.name "git-hub 이름"

4) 프로젝트 파일 생성
5) git status (상태확인)
6) git add 파일이름 or git add .(현재폴더)
7) git status (변경확인)
8) git commit -m "커밋메세지"
9) git log, git log --oneline(버전 생성 확인)

===============================

브랜치 생성
git checkout -b 브랜치이름
git branch 브랜치 이름

브랜치 삭제
git branch -d 브랜치이름

---------------
작업 후 커밋
---------------

git checkout master로 이동
git merge 브랜치이름

===============================

git-hub
1) 레포지토리 생성
2) 레포지토리 주소 복사
3) git remote add 이름 "레포지토리 주소"
4) git remote -v 를 통해 확인
5) git push 이름 브랜치(master, main)

===============================

전체 순서
   git init
   git add .
   git status
   git commit -m "메세지"
   git log --pretty=oneline
   git checkout [커밋아이디, 브랜치명]
   git branch [브랜치명]
   git branch -d [브랜치명] : 브랜치 삭제
   git merge [브랜치명]
   git remote add [원격 저장소 이름] [서버의 경로]
   git remote -v
   git remote remove [원격 저장소 이름]
   git push [원격 저장소 이름] [원격 저장소의 브랜치]


팀장
   organization 생성
   팀원 초대
   repository 생성
   팀원 초대
   init(.gitignore)
   organization에 push

전원
   fork

팀원
   clone
   작업 브랜치 생성
   작업 진행
   add
   commit
   master 브랜치로 이동
   병합
   push origin
   PR
   팀장에게 연락
   작업 브랜치 이동
   작업 진행

팀장
   팀원에게 연락 옴
   PR 확인
   충돌 시 선택 후 확정
   충돌 없을 시 Merge
   팀원 전체에게 연락: 전체 pull 받으세요

팀원
   master 브랜치 이동
   pull project
   작업 브랜치 이동
   다른 작업자의 코드가 필요하면 merge
   작업 진행
